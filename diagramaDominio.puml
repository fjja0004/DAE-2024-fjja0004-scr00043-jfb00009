@startuml
title "Capa de dominio"
hide circle
'skinparam classAttributeIconSize 0

class ServicioClub <<servicio>> <<repositorio>> {
    - esAdmin(socio: Socio): Boolean
    + login(email: String, clave: String): Socio
    + añadirSocio(nombre: String, apellido: String, email: String, teléfono: String, clave: String): void
    + buscarTodosSocios(direccion: Socio): List<Socio>
    + crearActividad(título: String, descripción: String, precio: Double, nPlazas: Integer, fechaCelebración: Date, fechaInicioInscripción: Date, fechaFinInscripción: Date): Boolean
    + marcarCuotaPagada(socio: Socio): void
    + buscarActividadesAbiertas(): List<Actividad>
    + buscarTodasActividadesTemporadaActual(): List<Actividad>
    + realizarSolicitud(nAcompañantes: Integer, actividad: Actividad): void
    + modificarAcompañantes(socio: Socio,actividad: Actividad,nAcompañantes:Integer): void
    + buscarSolicitudesDeActividad(Socio direccion, Actividad actividad): List<Solicitud>
    + cancelarSolicitud(socio: Socio, actividad: Actividad): void
    + asignarPlaza(direccion: Socio, socio: Socio, actividad: Actividad): void
    + quitarPlaza(direccion: Socio, socio: Socio, actividad: Actividad): void
    + crearTemporadaInicial(): void
    + crearNuevaTemporada(): void
    + buscarTemporadaPorAnio(int anio): Optional<Temporada>
    + buscarTodasTemporadas(): List<Temporada>
}

class Socio <<entidad>> {
    - id: Integer
    - nombre: String
    - apellidos: String
    - email: String
    - teléfono: String
    - clave: String
    - cuotaPagada: Enum[NoPagado, Pendiente, Pagado]

    + isCuotaPagada(): Boolean
    + comprobarCredenciales(clave: String)
}

class Actividad <<entidad>> {
- título: String
- descripción: String
- precio: Double
- nPlazas: Integer
- fechaCelebración: Date
- fechaInicioInscripción: Date
- fechaFinInscripción: Date
+ realizarSolicitud(Solicitud:solicitud):void
+ borrarSolicitud(Solicitud:solicitud)):void
+ modificarAcompañantes(String: email,Integer:nAcompañantes):void
}

class Solicitud <<objeto-valor>> {
    - id: Integer
    - nAcompañantes: Integer
    - fecha: Date
    - plazasAceptadas: Integer
    - socio: Socio

    + modificarAcompañantes(Integer:nAcompañantes):void
    + aceptarPlaza(): void
    + quitarPlaza(): void
}

class Temporada <<entidad>> {
    - año: Integer
    - actividades: List<Actividad>
    - contadorIds: Integer

    - generarId(): Integer
    + crearActividad(actividad Actividad): void
    + buscarActividadPorTitulo(titulo: String): Optional<Actividad>
    + buscarTodasActividadesTemporadaActual(): List<Actividad>
    + buscaTodasActividadesAbiertas(): List<Actividad>
    + buscarPorId(id: Integer): Actividad
}

class RepositorioSocios <<Repositorio>> {
    + crear(Socio socio): void
    + buscarPorEmail(email: String): Socio
    + buscaTodos(): List<Socio>
    + marcarTodasCuotasNoPagadas(): void
}

class RepositorioTemporada <<Repositorio>> {
    + crearTemporada(): void
    + buscarPorAnio(anio: Integer): Optional<Temporada>
    + buscarTodasTemporadas(): List<Temporada>
}

Solicitud "*" -> "1" Socio : solicitante
Actividad "1" *-> "*" Solicitud : solicitud
Temporada "1" *--> "*" Actividad : actividades
ServicioClub ...> RepositorioSocios : usa
RepositorioSocios "1" *--> "*" Socio : socio
RepositorioTemporada "1" *--> "*" Temporada : temporada
ServicioClub ..> RepositorioTemporada : usa

@enduml